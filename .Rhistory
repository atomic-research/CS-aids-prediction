All_Panels_09202018_07102019_forpaper <- read.delim("~/CSPdata/All_Panels_09202018_07102019_forpaper.txt")
View(All_Panels_09202018_07102019_forpaper)
t.test(All_Panels_09202018_07102019_forpaper$Target_Freq_eng, All_Panels_09202018_07102019_forpaper$Target_Freq_sp, paired = TRUE)
t.test(All_Panels_09202018_07102019_forpaper$Target_Freq_eng, All_Panels_09202018_07102019_forpaper$Target_Freq_sp, paired = TRUE)
git config --global user.email "aleksandra.tomic05@gmail.com"
git config --global user.email aleksandra.tomic05@gmail.com
git config <-global user.email aleksandra.tomic05@gmail.com
git config <-global user.email "aleksandra.tomic05@gmail.com"
All_Panels_09202018_07102019_forpaper_lohi_comparison <- read.delim("~/CSPdata/All_Panels_09202018_07102019_forpaper_lohi_comparison.txt")
View(All_Panels_09202018_07102019_forpaper_lohi_comparison)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_lo, paired = TRUE)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_lo)
All_Panels_09202018_07102019_forpaper_lohi_comparison <- read.delim("~/CSPdata/All_Panels_09202018_07102019_forpaper_lohi_comparison.txt")
View(All_Panels_09202018_07102019_forpaper_lohi_comparison)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_lo, paired = TRUE)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_sp_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_sp_lo, paired = TRUE)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_lo, paired = FALSE)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_lo, paired = TRUE)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_sp_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_sp_lo, paired = TRUE)
t.test(All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_hi, All_Panels_09202018_07102019_forpaper_lohi_comparison$Target_Freq_eng_lo, paired = TRUE)
git config --global user.email "aleksandra.tomic05@gmail.com"
git config --global user.name "atomic-research"
git config --global user.email aleksandra.tomic05@gmail.com
git config --global user.name atomic-research
git config --local --list
git config --global --list
git config --local --list
git config --global --list
view(git config)
view(git config)
$ git config --global --list
git config --global --list
sound_word_pre800_post500_n30 <- read.delim("~/CSPdata/Results/sound_word_pre800_post500_n30.txt")
View(sound_word_pre800_post500_n30)
View(sound_word_pre800_post500_n30)
View(sound_word_pre800_post500_n30)
View(sound_word_pre800_post500_n30)
git reset --soft HEAD^1
setwd("~/CS-aids-prediction")
LHQ_trimmed_n30 <- read.delim2("~/CS-aids-prediction/Data_Individual/LHQ_trimmed_n30.txt")
View(LHQ_trimmed_n30)
target_sub_200pre_200post_word <- read.csv("~/CS-aids-prediction/Data_Eyetracking/target_sub_200pre_200post_word.csv")
View(target_sub_200pre_200post_word)
orthogonal_polynomials <- poly(sort(as.vector(unique(target_sub_200pre_200post_word$Time))), 5)
time_codes <- data.frame(
sort(as.vector(unique(target_sub_200pre_200post_word$Time))),
orthogonal_polynomials[, c(1:5)]
)
colnames(time_codes) <- c('Time','ot1','ot2','ot3','ot4','ot5')
target_sub_200pre_200post_word_poly <- merge(target_sub_200pre_200post_word, time_codes, by='Time')
target_sub_200pre_200post_word_poly %>%
ggplot(data = ., aes(Bins, ot1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
library(tidyverse)
library(lme4)
library(ez)
library(multcomp)
target_sub_200pre_200post_word_poly %>%
ggplot(data = ., aes(Bins, ot1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
target_sub_200pre_200post_word_poly_centered <- target_sub_200pre_200post_word_poly %>%
mutate(Prop_cs = as.numeric(scale(Prop, center = TRUE, scale = TRUE)),
DELE.MELICET_cs = as.numeric(scale(DELE.MELICET, center = TRUE, scale = TRUE)),
Bins_cs = as.numeric(scale(Bins, center = TRUE, scale = TRUE)))
write.csv("target_sub_200pre_200post_word_poly_centered.csv", target_sub_200pre_200post_word_poly_centered)
write.csv(target_sub_200pre_200post_word_poly_centered, "target_sub_200pre_200post_word_poly_centered.csv")
target_sub_200pre_200post_word_poly_centered %>%
ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language) + xlab("Time_scaled") + ylab("Proportion of looks")
target_sub_200pre_200post_word_poly_centered$DELE.MELICET_cs <- setNames(split(target_sub_200pre_200post_word_poly_centered$DELE.MELICET_cs, seq(nrow(target_sub_200pre_200post_word_poly_centered$DELE.MELICET_cs))), rownames(xy.df))
target_sub_200pre_200post_word_poly_centered_catDom <- target_sub_200pre_200post_word_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
View(target_sub_200pre_200post_word_poly_centered_catDom)
target_sub_200pre_200post_word_poly_centered_catDom %>% ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_grid(cols = vars(language), rows = vars(dominance_cat)) + xlab("Time_scaled") + ylab("Proportion of looks")
model_target_sub_200pre_200post_word_cs <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item*Bins  + (1+language*Freq_of_fixated_item|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered)
View(model_target_sub_200pre_200post_word_cs)
summary(model_target_sub_200pre_200post_word_cs)
model_target_sub_200pre_200post_word_cs_bins_cs <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item*Bins_cs  + (1+language*Freq_of_fixated_item|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered)
summary(model_target_sub_200pre_200post_word_cs_bins_cs)
model_target_sub_200pre_200post_word_cs_noBins <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item  + (1+language*Freq_of_fixated_item|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered)
summary(model_target_sub_200pre_200post_word_cs_noBins)
data.frame(target_sub_200pre_200post_word_poly_centered, Predicted=fitted(model_target_sub_200pre_200post_word_cs_noBins))->plotearly_noBins_prop_cs
ggplot(plotearly_noBins_prop_cs, aes(Bins_cs, Prop, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset +200 after word onset", y = "Proportion of Looks")
ggplot(plotearly_noBins_prop_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset +200 after word onset", y = "Proportion of Looks")
ggplot(plotearly_noBins_prop_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset +200 after word onset", y = "Proportion of Looks")+theme_bw(base_size = 11, base_family = "",
ggplot(plotearly_noBins_prop_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset +200 after word onset", y = "Proportion of Looks")+theme_bw(base_size = 11, base_family = "", base_line_size = base_size/22, base_rect_size = base_size/22)
plot(model_target_sub_200pre_200post_word_cs_noBins)
plot(model_target_sub_200pre_200post_word_cs_noBins)
model_target_sub_200pre_200post_word_poly <- lmer(Prop ~ language*DELE.MELICET*Freq_of_fixated_item*(ot1 + ot3+ ot2) + (1+language+Freq_of_fixated_item+ot1+ot2+ot3|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered)
summary(model_target_sub_200pre_200post_word_poly)
target_sub_200pre_200post_word_poly %>%
ggplot(data = ., aes(Bins, ot1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
target_sub_200pre_200post_word_poly %>%
ggplot(data = ., aes(Bins, ot2)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
target_sub_200pre_200post_word_poly %>%
ggplot(data = ., aes(Bins, ot3)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
model_target_sub_200pre_200post_word_poly_prop_cs <- lmer(Prop_cs ~ language*DELE.MELICET*Freq_of_fixated_item*(ot1 + ot3+ ot2) + (1+language+Freq_of_fixated_item+ot1+ot2+ot3|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered)
summary(model_target_sub_200pre_200post_word_poly_prop_cs)
model_target_sub_200pre_200post_word_poly_prop_cs <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item*(ot1 + ot3+ ot2) + (1+language+Freq_of_fixated_item+ot1+ot2+ot3|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered)
summary(model_target_sub_200pre_200post_word_poly_prop_cs)
data.frame(target_sub_200pre_200post_word_poly_centered, Predicted=fitted(model_target_sub_200pre_200post_word_poly_prop_cs))->plotearly_poly_cs
ggplot(model_target_sub_200pre_200post_word_poly_prop_cs, aes(Bins, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset", y = "Proportion Looks to Target")
plotearly_poly_cs
str(plotearly_poly_cs)
ggplot(plotearly_poly_cs, aes(Bins, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset", y = "Proportion Looks to Target")
ggplot(plotearly_poly_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset", y = "Proportion Looks to Target")
ggplot(plotearly_poly_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean_se, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset", y = "Proportion Looks to Target")
ggplot(plotearly_poly_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset (normalized)", y = "Proportion of looks to target (normalized)")
ggplot(plotearly_poly_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset (normalized)", y = "Proportion of looks to items (normalized)")
plot(model_target_sub_200pre_200post_word_poly_prop_cs)
print(model_target_sub_200pre_200post_word_poly_prop_cs, correlation=TRUE)
ggplot(plotearly_poly_cs, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset (normalized)", y = "Proportion of looks to items (normalized)")
#MODELS
target_sub_200pre_200post_word_poly_centered_1only <- target_sub_200pre_200post_word_poly_centered %>%
filter(Look == 1)
model_target_sub_200pre_200post_word_poly_centered_1only_noBins <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item  + (1+language*Freq_of_fixated_item|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered_1only)
summary(model_target_sub_200pre_200post_word_poly_centered_1only_noBins)
data.frame(target_sub_200pre_200post_word_poly_centered, Predicted=fitted(model_target_sub_200pre_200post_word_cs_bins_cs))->plotearly_cs_noBins_cs_only1
plotearly_cs_noBins_cs_only1
ggplot(plotearly_cs_noBins_cs_only1, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset (normalized)", y = "Proportion of looks to items (normalized)")
data.frame(target_sub_200pre_200post_word_poly_centered_1only, Predicted=fitted(model_target_sub_200pre_200post_word_poly_centered_1only_noBins))->plotearly_cs_noBins_cs_only1
plotearly_cs_noBins_cs_only1
ggplot(plotearly_cs_noBins_cs_only1, aes(Bins_cs, Prop_cs, color=Freq_of_fixated_item))+facet_grid(.~language)+stat_summary(aes(y=Predicted, color=Freq_of_fixated_item), fun.y=mean, geom="line")+stat_summary(fun.data=mean_se, geom="pointrange")+theme_bw()+labs(x="-200 ms to word onset, +200 after word onset (normalized)", y = "Proportion of looks to items (normalized)")
model_target_sub_200pre_200post_word_poly_centered_1only <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item*(ot1 + ot3+ ot2) + (1+language+Freq_of_fixated_item+ot1+ot2+ot3|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_poly_centered_1only)
summary(model_target_sub_200pre_200post_word_poly_centered_1only)
str(target_sub_200pre_200post_word_poly_centered_1only)
str(target_sub_200pre_200post_word_poly_centered_1only$Bins) <- as.factor(target_sub_200pre_200post_word_poly_centered_1only$Bins)
target_sub_200pre_200post_word_poly_centered_1only$Bins <- as.factor(target_sub_200pre_200post_word_poly_centered_1only$Bins)
str(target_sub_200pre_200post_word_poly_centered_1only)
target_sub_200pre_200post_word <- read.csv("~/CS-aids-prediction/Data_Eyetracking/target_sub_200pre_200post_word.csv")
View(target_sub_200pre_200post_word)
target_sub_200pre_200post_word_no30bin <- target_sub_200pre_200post_word %>%
filter(Bins > 30)
orthogonal_polynomials <- poly(sort(as.vector(unique(target_sub_200pre_200post_word_no30bin$Time))), 5)
time_codes <- data.frame(
sort(as.vector(unique(target_sub_200pre_200post_word_no30bin$Time))),
orthogonal_polynomials[, c(1:5)]
)
colnames(time_codes) <- c('Time','ot1','ot2','ot3','ot4','ot5')
target_sub_200pre_200post_word_no30bin_poly <- merge(target_sub_200pre_200post_word_no30bin, time_codes, by='Time')
#mogla bih da plotujem ovde, mozda je trebalo od 1 da mi krece Time
target_sub_200pre_200post_word_no30bin %>%
ggplot(data = ., aes(Bins, ot3)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
target_sub_200pre_200post_word_no30bin <- target_sub_200pre_200post_word %>%
filter(Bins > 30)
orthogonal_polynomials <- poly(sort(as.vector(unique(target_sub_200pre_200post_word_no30bin$Time))), 5)
time_codes <- data.frame(
sort(as.vector(unique(target_sub_200pre_200post_word_no30bin$Time))),
orthogonal_polynomials[, c(1:5)])
colnames(time_codes) <- c('Time','ot1','ot2','ot3','ot4','ot5')
target_sub_200pre_200post_word_no30bin_poly <- merge(target_sub_200pre_200post_word_no30bin, time_codes, by='Time')
#mogla bih da plotujem ovde, mozda je trebalo od 1 da mi krece Time
target_sub_200pre_200post_word_no30bin %>%
ggplot(data = ., aes(Bins, ot3)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
View(target_sub_200pre_200post_word_no30bin)
View(target_sub_200pre_200post_word_no30bin_poly)
#mogla bih da plotujem ovde, mozda je trebalo od 1 da mi krece Time
target_sub_200pre_200post_word_no30bin %>%
ggplot(data = ., aes(Time, ot3)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
#mogla bih da plotujem ovde, mozda je trebalo od 1 da mi krece Time
target_sub_200pre_200post_word_no30bin_poly %>%
ggplot(data = ., aes(Time, ot3)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
target_sub_200pre_200post_word_no30bin_poly_centered <- target_sub_200pre_200post_word_no30bin_poly %>%
mutate(Prop_cs = as.numeric(scale(Prop, center = TRUE, scale = TRUE)),
DELE.MELICET_cs = as.numeric(scale(DELE.MELICET, center = TRUE, scale = TRUE)),
Bins_cs = as.numeric(scale(Bins, center = TRUE, scale = TRUE)))
target_sub_200pre_200post_word_no30bin_poly_centered %>%
ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language) + xlab("Time_scaled") + ylab("Proportion of looks")
write.csv(target_sub_200pre_200post_word_no30bin_poly_centered, "target_sub_200pre_200post_word_no30bin_poly_centered.csv")
target_sub_200pre_200post_word_no30bin_poly_centered_catDom <- target_sub_200pre_200post_word_no30bin_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
target_sub_200pre_200post_word_no30bin_poly_centered_catDom <- target_sub_200pre_200post_word_no30bin_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>% ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_grid(cols = vars(language), rows = vars(dominance_cat)) + xlab("Time_scaled") + ylab("Proportion of looks")
#MODELS
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_1only <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>%
filter(Look == 1)
model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item*(ot1 + ot3+ ot2) + (1+language+Freq_of_fixated_item+ot1+ot2+ot3|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
summary(model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
model_reg_target_sub_200pre_200post_word_no30bin_poly_centered_catDom <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item  + (1+language*Freq_of_fixated_item|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
model_reg_target_sub_200pre_200post_word_no30bin_poly_centered_catDom_noBins <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item  + (1+language*Freq_of_fixated_item|RECORDING_SESSION_LABEL), target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
summary(model_reg_target_sub_200pre_200post_word_no30bin_poly_centered_catDom_noBins)
write.csv(target_sub_200pre_200post_word_no30bin_poly_centered_catDom, "target_sub_200pre_200post_word_no30bin_poly_centered_catDom.csv")
read.csv("target_sub_200pre_200post_word_item.csv", target_sub_200pre_200post_word_item)
library(readr)
target_sub_200pre_200post_word_item <- read_csv("Data_Eyetracking/target_sub_200pre_200post_word_item.csv")
View(target_sub_200pre_200post_word_item)
target_sub_200pre_200post_word_item <- target_sub_200pre_200post_word_item %>%
mutate(Time = Bins)
orthogonal_polynomials <- poly(sort(as.vector(unique(target_sub_200pre_200post_word_item$Time))), 5)
target_sub_200pre_200post_word_item_poly <- merge(target_sub_200pre_200post_word_item, time_codes, by='Time')
target_sub_200pre_200post_word_item_poly %>%
ggplot(data = ., aes(Time, ot3)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
target_sub_200pre_200post_word_item_poly_centered <- target_sub_200pre_200post_word_item_poly %>%
mutate(Prop_cs = as.numeric(scale(Prop, center = TRUE, scale = TRUE)),
DELE.MELICET_cs = as.numeric(scale(DELE.MELICET, center = TRUE, scale = TRUE)),
Bins_cs = as.numeric(scale(Bins, center = TRUE, scale = TRUE)))
target_sub_200pre_200post_word_item_poly_centered %>%
ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language) + xlab("Time_scaled") + ylab("Proportion of looks")
write.csv(target_sub_200pre_200post_word_item_poly_centered, "target_sub_200pre_200post_word_item_poly_centered.csv")
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
target_sub_200pre_200post_word_item_poly_centered_catDom %>% ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_grid(cols = vars(language), rows = vars(dominance_cat)) + xlab("Time_scaled") + ylab("Proportion of looks")
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
target_sub_200pre_200post_word_item_poly$DELE.MELICET_[is.na(target_sub_200pre_200post_word_item_poly$DELE.MELICET)] <- 0.71
target_sub_200pre_200post_word_item_poly_centered <- target_sub_200pre_200post_word_item_poly %>%
mutate(Prop_cs = as.numeric(scale(Prop, center = TRUE, scale = TRUE)),
DELE.MELICET_cs = as.numeric(scale(DELE.MELICET, center = TRUE, scale = TRUE)),
Bins_cs = as.numeric(scale(Bins, center = TRUE, scale = TRUE)))
write.csv(target_sub_200pre_200post_word_item_poly_centered, "target_sub_200pre_200post_word_item_poly_centered.csv")
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
target_sub_200pre_200post_word_item_poly_centered_catDom %>% ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_grid(cols = vars(language), rows = vars(dominance_cat)) + xlab("Time_scaled") + ylab("Proportion of looks")
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered_catDom %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
target_sub_200pre_200post_word_item_poly$DELE.MELICET[is.na(target_sub_200pre_200post_word_item_poly$DELE.MELICET)] <- 0.71
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
target_sub_200pre_200post_word_item_poly_centered <- target_sub_200pre_200post_word_item_poly %>%
mutate(Prop_cs = as.numeric(scale(Prop, center = TRUE, scale = TRUE)),
DELE.MELICET_cs = as.numeric(scale(DELE.MELICET, center = TRUE, scale = TRUE)),
Bins_cs = as.numeric(scale(Bins, center = TRUE, scale = TRUE)))
write.csv(target_sub_200pre_200post_word_item_poly_centered, "target_sub_200pre_200post_word_item_poly_centered.csv")
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
View(target_sub_200pre_200post_word_item_poly_centered)
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom"))
View(target_sub_200pre_200post_word_item_poly_centered_catDom)
target_sub_200pre_200post_word_item_poly_centered_catDom %>% ggplot(data = ., aes(Bins_cs, Prop, color = Freq_of_fixated_item)) + stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_grid(cols = vars(language), rows = vars(dominance_cat)) + xlab("Time_scaled") + ylab("Proportion of looks")
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom")) %>%
delete(DELE.MELICET_)
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom")) %>%
select(-DELE.MELICET_)
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom")) %>%
tidyverse::select(-DELE.MELICET_)
target_sub_200pre_200post_word_item_poly_centered_catDom <- target_sub_200pre_200post_word_item_poly_centered %>%
mutate(dominance_cat = ifelse(DELE.MELICET>mean(DELE.MELICET), "SpDom", "EngDom")) %>%
dplyr::select(-DELE.MELICET_)
write.csv(target_sub_200pre_200post_word_no30bin_poly_centered_catDom, "target_sub_200pre_200post_word_no30bin_poly_centered_catDom.csv")
write.csv(target_sub_200pre_200post_word_item_poly_centered_catDom, "target_sub_200pre_200post_word_item_poly_centered_catDom.csv")
model_target_sub_200pre_200post_word_item_poly_centered_catDom_OP <- lmer(Prop_cs ~ language*DELE.MELICET_cs*Freq_of_fixated_item*(ot1 + ot3+ ot2) + (1+language+Freq_of_fixated_item+ot1+ot2+ot3|RECORDING_SESSION_LABEL)+(1+language+Freq_of_fixated_item+ot1+ot2+ot3|pair_num), target_sub_200pre_200post_word_item_poly_centered_catDom)
summary(model_target_sub_200pre_200post_word_item_poly_centered_catDom_OP)
summary(model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
summary(model_target_sub_200pre_200post_word_item_poly_centered_catDom_OP)
#mogla bih da plotujem ovde, mozda je trebalo od 1 da mi krece Time
target_sub_200pre_200post_word_item_poly %>%
ggplot(data = ., aes(Time, ot2)) +
stat_summary(fun.y = mean, geom = "point") +
stat_smooth() +
facet_wrap(~language)
plot(model_target_sub_200pre_200post_word_item_poly_centered_catDom_OP)
plot(model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
qqnorm(resid(model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom))
qqnorm(resid(model_target_sub_200pre_200post_word_item_poly_centered_catDom_OP))
qqnorm(resid(model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom))
anova(model_target_sub_200pre_200post_word_no30bin_poly_centered_catDom)
install.packages("sjPlot")
install.packages("sjPlot")
library(tidyverse)
library(lme4)
#spanish -0.5 english +0.5
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_contrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>%
mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
library(tidyverse)
library(lme4)
install.packages(lme4)
install.packages("lme4")
install.packages("lme4")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(lme4)
install.packages("lme4")
install.packages("tidyverse")
install.packages("lme4")
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_contrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>%
mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
library(tidyverse)
library(lme4)
#spanish -0.5 english +0.5
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_LangContrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>%
mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
#spanish -0.5 english +0.5
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_LangContrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>%
mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
library(tidyverse)
#spanish -0.5 english +0.5
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_LangContrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom %>%
mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
#spanish -0.5 english +0.5
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_LangContrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom dplyr::%>%
mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
#spanish -0.5 english +0.5
target_sub_200pre_200post_word_no30bin_poly_centered_catDom_LangContrastCoding <- target_sub_200pre_200post_word_no30bin_poly_centered_catDom dplyr::%>%
tidyverse::mutate(language_cont = ifelse(language == 'S', -0.5, 0.5))
